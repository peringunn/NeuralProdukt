public class CalculateProdukt {

    //Her er verdiene og vektene fra neural network definert som statiske verdier

    public static double x1_step1_xoffset[] = {-0.271040469,-2.092832565,-429.4252625,0,0,0,0,0,0,0,-0.234375,0.29296875,-0.384496212,14.40952396,0,0,0,11.39515495,0 };

    public static double x1_step1_gain[] = { 0.00376356058769408,0.000560487023272718,0.00263263734344201,2,2,2,2,2,2,2,0.00100120463540045,0.000159374418035908,0.00112421291627032,0.0222570575987302,2,2,2,0.0273989032173012,2 };
    public static double x1_step1_ymin = -1.0;

    //Layer 1
    public static double b1[] = {-1.538716871391288,-1.348628940040959,0.61331737313695656,0.6155163753480849,0.019244011188411785,-0.25919141631578918,0.40256566749536199,1.0389742136639439,1.3071262975279736,-1.5976278919546263};

    public static double IW1_1[][] = {
            {0.66967881813297248, 0.45891428935328094, 0.46403319936560167, -0.33450205964904195, 0.81274258880171435, -0.35902426205645177, -0.71834930352521087, 0.41204909907179138, -0.43943198580941317, -0.076943247617679844, -0.10392972338080922, -0.19486802208086501, -0.47610022598060908, -0.22660569310901069, 0.20417546409029533, -0.5211314534684155, 0.20331730902884695, -0.19801984277358101, 0.2820223389771182},

            {0.25727927195686212, -0.065931152597460851, 0.077755246969629419, 1.1258287236216156, 0.39974110434404347, 0.14930549082283046, -0.17003111333162657, 0.020599861673932338, 0.096446433949349153, -0.26198987792669343, -0.40807129582966012, -0.42486315141890441, 0.35594164896062613, -0.64055292225149374, -0.26857079273725032, 0.7655213568135939, 0.76586209481943335, 0.60382093376921586, 0.94630856592060797},

            {0.2909691885324735, 0.36393026603775408, 0.43501372076096861, -1.0897075356244028, -0.035114627075188989, 0.17391032508190371, -0.1559941027739439, -0.20008368452835035, -0.22782420379957352, -0.0016249986915616438, 0.60716904487886014, -0.30782366309659193, 0.35227874131027598, -1.3284128047851771, 0.52901798041713133, -0.45695885007015191, 0.30597776810122229, -0.6674028747779035, 0.11322786678666295},

            {0.31799004291970334, -0.41915528119752155, -0.068063632370305549, -0.059705198774862772, -0.22086330109687846, -0.4619578161204152, 0.40534992341850229, -0.26711889938671229, -1.2735041576182127, -1.181554449560414, -0.093956689072296096, -0.026852850027171207, 0.17206387693635061, -3.4504206443305097, -0.55520884792727832, -0.93297509319885197, 0.29456933667652507, 0.60070758427508875, -0.27708075859456804},

            {-0.78907222754205308, 0.84604235711179687, -0.53022308904277193, -0.80765039262945137, 0.83416750821815788, 1.2605592273975756, -0.33854709072121431, 0.34207604301802996, -0.55610819903669828, 0.24365534067302771, 0.071533965193108867, -1.0758805673918901, 0.042527199608050487, -2.3594547127148999, -0.86762295735094919, 0.012568882854287762, 0.1841396561024648, -0.92624978812396175, -0.29757975444093576},

            {-0.8480419481734649, 0.51606080583930314, 0.58265285743317019, -0.051177611977684861, 0.34527638559426904, 0.4256858141545265, 0.46397682544244334, 0.57003893499166947, 0.036154298590520287, -0.87480673576978407, -0.15172061305920903, -0.43478380837011515, 0.2887362069755855, 0.014191390147376928, -0.18221290028993764, 0.14845137099211952, -0.25272006395406571, 0.13508991649745306, -0.049243482256931564},

            {0.13614490126844639, -0.25207062966742327, -0.12292416995720605, 0.54452848711021951, 0.46117230786377617, 0.30899726747799711, -0.36567004025907907, 0.1154518418092175, -0.27679061546905781, -0.9215569452730098, 0.23296342984841897, 0.2221203526676428, -0.42411428779073945, 0.04663102491379828, 0.20726466268593657, -0.38592796594164325, -0.032256141725843866, -0.43843533880206265, 0.1843848406385393},

            {-0.3093154935860869, 0.49943381829131789, 0.070219055664562213, -0.27460120619187545, 0.03126045221240592, -0.19032748367999452, -0.31521733703125604, -0.068742126106752413, -0.46040448080368163, -0.18764702159407848, 1.096224312673914, -0.012576472879165662, 0.18956447135287224, 0.087572467588308694, -0.097495911465994872, -0.072722483506825517, -0.11206959542259182, -0.47447094394976014, 0.84870269995187131},

            {0.43792636337152824, 0.65390460246910354, 0.26765355904408111, 0.28475780867081352, 0.62071854168380391, -0.366383328825379, -0.42251439847308531, 0.46962410496479695, 0.082076043615326846, 0.63949512815786935, -0.098031399711534753, -0.096106540674632951, -0.11511920479686839, 0.25119292001786575, -0.030290316582724561, -0.050331182350523744, 0.45886156560699842, 0.10164083825385091, -0.36359446645319288},

            {0.053259674215096857, 0.064573265597374557, -0.61615647427996245, 0.5960051289173609, -0.092190293911079427, 0.30304610274536231, 0.30997348034195921, -0.36616357542612826, -0.43244262540462586, -0.35007118959354661, -0.031737221577101946, -0.29916809303026187, 0.2695990782448231, -0.90573366222309948, 0.50681942730256913, -0.045107445106440922, 0.25382402129945258, 1.0478741801667597, 0.17674150822216858}};


    // Layer 2
    public static double b2 = 0.40765785331406112;
    public static double LW2_1[] = {0.32619227159560787, 0.59698943631223511, 0.77529728513191765, -0.74495929942303241, -0.62509844203986931, 0.47090650189531924, -0.085686341777462677, -0.70004087443923924, -0.047724780262820246, -0.59689670866531475};

    //Output
    public static double y1_step1_ymin = -1.0;
    public static double y1_step1_gain = 2.5;
    public static double y1_step1_xoffset = 0.1;

    //Hovedfunksjon som kjører beregningen
    //public static void main(String[] args) {
    public double Utregn(double v1, double v2, double v3, double v4, double v5, double v6, double v7, double v8, double v9, double v10, double v11, double v12, double v13, double v14, double v15, double v16, double v17, double v18, double v19){
        // TODO Auto-generated method stub

        //Initaialisering av input verdier {Svovel, Rastoff, molar, 40HU580, 40HU581,40HU292, 6032HU007, 22HU274, 22HU505, 22HU013, 22FT307, 22FT306, 22FT309, 22TT102, 24GSH157, 24GSH156, 24HCV155, 22TE304, 22HSV117}
        //double[] x1 = {4380,330,-60,5345,1300,600,0.9,32.2};
        double[] x1 = {v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19};


        //Denne matrisen skal være lik antallet hidden layers
        double[] xp1 = new double[x1.length];
        double[] IW1_1Xp1 = new double[b1.length];
        double[] sumTilTransig = new double[IW1_1.length];
        double[] a1 = new double[IW1_1.length];
        double a2 = 0;
        double y1 = 0;

        //Finner xp1
        xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);

        //Finner produktet IW1_1 * xp1
        IW1_1Xp1 = beregnMatrise(IW1_1, xp1);

        //Finner summen til b1 + IW1_1*xp1
        sumTilTransig = summerMatrise(b1, IW1_1Xp1);


        //Finner så a1 (a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1)
        a1 = tansig_apply(sumTilTransig);

        //Finner så a2(b2 + LW2_1 * a1)
        a2 = finnA2(b2, LW2_1, a1);

        //Finner tilslutt den predikterte verdien
        y1 = mapminmax_reverse(a2, y1_step1_gain, y1_step1_xoffset, y1_step1_ymin);

        return y1;

    }

    //Funksjon for mapminmax_apply
    static double[] mapminmax_apply(double[] x,double[] settings_gain, double[] settings_xoffset,double settings_ymin)
    {
        //Initialiserer return verdien
        double ret[] = new double[x.length];

        //Beregner først offset
        for (int i=0; i<x.length; i++)
        {
            ret[i] = x[i] - settings_xoffset[i];
            ret[i] = ret[i] * settings_gain[i];
            ret[i] = ret[i] + settings_ymin;
        }

        return ret;
    }

    //Funksjon for å multiplisere matriser
    static double[] beregnMatrise(double m1[][], double m2[])
    {
        double M3[] = new double[m1.length];
        double sum = 0;

        for(int c=0; c<m1.length; c++)
        {
            for (int d=0; d<m2.length; d++) {
                sum = sum + m1[c][d] * m2[d];

            }
            M3[c] = sum;
            sum = 0;

        }
        return M3;

    }

    //Funksjon for å finn a2 verdien
    static double finnA2(double b2, double LW2_1[], double a1[])
    {
        double sum = 0;

        for (int i=0; i<b1.length; i++)
        {
            sum = sum + LW2_1[i] * a1[i];
        }
        return sum + b2;
    }

    //Funskjon for å summere matriser
    static double[] summerMatrise(double m1[], double m2[])
    {
        double M3[] = new double[m1.length];
        for(int i=0; i< M3.length; i++)
        {
            M3[i] = m1[i] + m2[i];
        }
        return M3;
    }

    //Funksjon for å finne a1
    static double[] tansig_apply(double m1[])
    {
        double ret[] = new double[m1.length];
        double expFunc = 0;

        for (int i=0; i<m1.length; i++)
        {
            expFunc = (-2) * m1[i];
            //a = 2 ./ (1 + exp(-2*n)) - 1;
            ret[i] = 2/(1 + Math.exp(expFunc))-1;
        }
        return ret;
    }

    //Funksjon for å beregne den predikterte verdien
    static double mapminmax_reverse(double y, double settings_gain, double settings_xoffset,double settings_ymin)
    {
        double ret = 0;

        ret = 	y - settings_ymin;
        ret = ret / settings_gain;
        ret = ret + settings_xoffset;

        return ret;
    }
}